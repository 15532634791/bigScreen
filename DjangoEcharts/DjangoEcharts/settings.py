"""
Django settings for DjangoEcharts project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-qff&r=fnt(bc)^k0ir3b4!)a!q7^5mhnokak$-=5zmxy03)&hn'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',

    'Apps.Login.apps.LoginConfig',
    'Apps.BigScreen.apps.BigScreenConfig',
]

# DRF 配置信息
REST_FRAMEWORK = {
    # 配置登录鉴权方式
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 基本认证
        'rest_framework.authentication.BasicAuthentication',
        # session认证
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'Middlewares.iframe_middleware.XFrameOptionsMiddleware',
    'Middlewares.cors_middlewares.CorsMiddleware',
]

ROOT_URLCONF = 'DjangoEcharts.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'DjangoEcharts.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.mysql",
#         "NAME": "bigScreen",
#         "USER": "root",
#         "PASSWORD": "123456",
#         "HOST": "127.0.0.1",
#         # "HOST": "192.168.90.129",
#         "PORT": "3306",
#     }
# }

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "large_screen",
        "USER": "user_large",
        "PASSWORD": "largeqwer1234",
        "HOST": "82.156.154.127",
        "PORT": "3366",
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


APPEND_SLASH = False
AUTH_USER_MODEL = 'Login.User'  # 只需要 模块名.类名 即可，不需要 包名.模块名.类名('apps.user.User')。


# 使用自定义的认证类进行身份认证（登录时验证用户信息）
# AUTHENTICATION_BACKENDS = [
#     'Common.authenticate.MyBackend'
# ]

# JWT配置
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=120),  # Access Token的有效期
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),  # Refresh Token的有效期

    # 对于大部分情况，设置以上两项就可以了，以下为默认配置项目，可根据需要进行调整

    # 是否自动刷新Refresh Token
    'ROTATE_REFRESH_TOKENS': False,
    # 刷新Refresh Token时是否将旧Token加入黑名单，如果设置为False，
    # 则旧的刷新令牌仍然可以用于获取新的访问令牌。需要将'rest_framework_simplejwt.token_blacklist'加入到'INSTALLED_APPS'的配置中
    'BLACKLIST_AFTER_ROTATION': False,
    'ALGORITHM': 'HS256',  # 加密算法

    # # 如为True，则在每次使用访问令牌进行身份验证时，更新用户最后登录时间
    # "UPDATE_LAST_LOGIN": False,
    # # 用于验证JWT签名的密钥返回的内容。可以是字符串形式的密钥，也可以是一个字典。
    # "VERIFYING_KEY": "",
    # "AUDIENCE": None,  # JWT中的"Audience"声明,用于指定该JWT的预期接收者。
    # "ISSUER": None,  # JWT中的"Issuer"声明，用于指定该JWT的发行者。
    # "JSON_ENCODER": None,  # 用于序列化JWT负载的JSON编码器。默认为Django的JSON编码器。
    # "JWK_URL": None,  # 包含公钥的URL，用于验证JWT签名。
    # "LEEWAY": 0,  # 允许的时钟偏差量，以秒为单位。用于在验证JWT的过期时间和生效时间时考虑时钟偏差。
    #
    # # 用于指定JWT在HTTP请求头中使用的身份验证方案。默认为"Bearer"
    # "AUTH_HEADER_TYPES": ("Bearer",),
    # # 包含JWT的HTTP请求头的名称。默认为"HTTP_AUTHORIZATION"
    # "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    # # 用户模型中用作用户ID的字段。默认为"id"。
    # "USER_ID_FIELD": "id",
    # # JWT负载中包含用户ID的声明。默认为"user_id"。
    # "USER_ID_CLAIM": "user_id",
    #
    # # 用于指定用户身份验证规则的函数或方法。默认使用Django的默认身份验证方法进行身份验证。
    # "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    #
    # #  用于指定可以使用的令牌类。默认为"rest_framework_simplejwt.tokens.AccessToken"。
    # "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    # # JWT负载中包含令牌类型的声明。默认为"token_type"。
    # "TOKEN_TYPE_CLAIM": "token_type",
    # # 用于指定可以使用的用户模型类。默认为"rest_framework_simplejwt.models.TokenUser"。
    # "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    #
    # # JWT负载中包含JWT ID的声明。默认为"jti"。
    # "JTI_CLAIM": "jti",
    #
    # # 在使用滑动令牌时，JWT负载中包含刷新令牌过期时间的声明。默认为"refresh_exp"。
    # "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    # # 滑动令牌的生命周期。默认为5分钟。
    # "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    # # 滑动令牌可以用于刷新的时间段。默认为1天。
    # "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
    # # 用于生成访问令牌和刷新令牌的序列化器。
    # "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    # # 用于刷新访问令牌的序列化器。默认
    # "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    # # 用于验证令牌的序列化器。
    # "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    # # 用于列出或撤销已失效JWT的序列化器。
    # "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    # # 用于生成滑动令牌的序列化器。
    # "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    # # 用于刷新滑动令牌的序列化器。
    # "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
}
